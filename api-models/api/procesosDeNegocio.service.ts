/**
 * Api CRM
 * Especificaciónes de la API pública de CRM.  # Versión 2 parte pública.  ***  Los métodos estaran protegidos mediante el paso de un token válido.  Los métodos que puedan ser accedidos por aplicaciones de terceros estarán protegidos por el paso de una api key que tendrá definidos los permisos correspondientes.  Se eliminan las descriciones de cambios de versiones anteriores a la 0.4.5, se pueden consultar en las versiones previas   ### 0.4.5 ***  ### FAQs Se renombran los métodos /faqs/file a /faqs/files para igualarlo con lo implementado en back se añade el método get  /faqs/files/{fileId} para la descarga de ficheros Se define corrctamente el método de subida de archivos post /faqs/files Se modifica FaqFile se añaden las propiedades fileName y fileType  ### 0.4.6 ***  ###Campañas Se definen el esquema Campaign Se definen los mátodos de camapañas   ###Users Se añade la propiedad citizen al esquema UserBasic que indica si es un usuario ciudadano  ### 0.4.7 *** modifica _id y fieldMaps en el esquema Campaign  ### 0.4.8 *** Se añade text en campaign para usar como texto a enviar en campañas que no usan plantillas como las notificaciones push Se añade subject  Se elimina campaignListId y se añade campaignListName Se añade la propiedad status (enumerado)       ### 0.4.9 *** Se añade metodo POST /persons/personContact  ### 0.5.0 ***  ###Contacto Campaña Se define el esquema CampaignContact Se añaden los métodos para la obtención, creación y borrado masivo de contactos en una campaña Se añaden los métodos para la obtención, edición y borrado de contactos , de manera individual, en una campaña  ###CitizenCard Se añade la propiedad citizenId en tarjeta ciudadana   ### 0.5.0 *** Se declara el esquema Survey que almacenará valoraciones del ciudadano  ###Solicitudes Se depreca   /crmrequests/{crmRequestId}/bpsprocess Añade el método POST   /crmrequests/{crmRequestId}/survey para almacenar la respuesta a la valoración de la solicitud Se añade la propiedad survey a la solicitud para almacenar la valoración del ciudadano a la atención recibida Se modifica el método en el método /crmrequests/{crmRequestId}/situation la clase del objeto a enviar en el post de CrmRequest a Situation  ###Person Se añade la propiedad surveys para almacenar las valoraciones del ciudadano al servicio prestado por el ayuntamiento Añade el método POST   /persons/survey para almacenar una nueva respuesta de encuesta de valoración del servicio 
 *
 * OpenAPI spec version: 0.5.1-PRIVATE
 * Contact: juancromero@grupotecopy.es
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BusinessProcessDefinition } from '../model/businessProcessDefinition';
import { BusinessProcessIndicator } from '../model/businessProcessIndicator';
import { BusinessProcessInstance } from '../model/businessProcessInstance';
import { BusinessProcessTaskActivity } from '../model/businessProcessTaskActivity';
import { BusinessProcessTaskDefinition } from '../model/businessProcessTaskDefinition';
import { ServiceResponseError } from '../model/serviceResponseError';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ProcesosDeNegocioService {

    protected basePath = '{servidor}/public/{version}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Obtiene proceso de negocio
     * Obtiene la definición de un proceso de negocio por su id  (/applications/3/process-definitions/{id})
     * @param businessprocessId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public businessprocessBusinessprocessIdGet(businessprocessId: string, observe?: 'body', reportProgress?: boolean): Observable<BusinessProcessDefinition>;
    public businessprocessBusinessprocessIdGet(businessprocessId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BusinessProcessDefinition>>;
    public businessprocessBusinessprocessIdGet(businessprocessId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BusinessProcessDefinition>>;
    public businessprocessBusinessprocessIdGet(businessprocessId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (businessprocessId === null || businessprocessId === undefined) {
            throw new Error('Required parameter businessprocessId was null or undefined when calling businessprocessBusinessprocessIdGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerToken) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BusinessProcessDefinition>('get',`${this.basePath}/businessprocess/${encodeURIComponent(String(businessprocessId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtiene las tareas definidas de un proceso de negocio
     * Obtiene todas las tareas definidas de un proceso de negocio
     * @param businessprocessId 
     * @param process_instance_id retorna los indicadores de la instancia de proceso
     * @param include_alarm_list incluye la lista de alarmas en la respuesta
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public businessprocessBusinessprocessIdIndicatorsGet(businessprocessId: string, process_instance_id?: string, include_alarm_list?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<BusinessProcessIndicator>>;
    public businessprocessBusinessprocessIdIndicatorsGet(businessprocessId: string, process_instance_id?: string, include_alarm_list?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BusinessProcessIndicator>>>;
    public businessprocessBusinessprocessIdIndicatorsGet(businessprocessId: string, process_instance_id?: string, include_alarm_list?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BusinessProcessIndicator>>>;
    public businessprocessBusinessprocessIdIndicatorsGet(businessprocessId: string, process_instance_id?: string, include_alarm_list?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (businessprocessId === null || businessprocessId === undefined) {
            throw new Error('Required parameter businessprocessId was null or undefined when calling businessprocessBusinessprocessIdIndicatorsGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (process_instance_id !== undefined && process_instance_id !== null) {
            queryParameters = queryParameters.set('process-instance-id', <any>process_instance_id);
        }
        if (include_alarm_list !== undefined && include_alarm_list !== null) {
            queryParameters = queryParameters.set('include-alarm-list', <any>include_alarm_list);
        }

        let headers = this.defaultHeaders;

        // authentication (BearerToken) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<BusinessProcessIndicator>>('get',`${this.basePath}/businessprocess/${encodeURIComponent(String(businessprocessId))}/indicators`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtiene instancias de proceso de negocio
     * Obtiene todas las instancias de un proceso de negocio
     * @param businessprocessId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public businessprocessBusinessprocessIdInstancesGet(businessprocessId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<BusinessProcessInstance>>;
    public businessprocessBusinessprocessIdInstancesGet(businessprocessId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BusinessProcessInstance>>>;
    public businessprocessBusinessprocessIdInstancesGet(businessprocessId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BusinessProcessInstance>>>;
    public businessprocessBusinessprocessIdInstancesGet(businessprocessId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (businessprocessId === null || businessprocessId === undefined) {
            throw new Error('Required parameter businessprocessId was null or undefined when calling businessprocessBusinessprocessIdInstancesGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerToken) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<BusinessProcessInstance>>('get',`${this.basePath}/businessprocess/${encodeURIComponent(String(businessprocessId))}/instances`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtiene la definición de tareas de un proceso de negocio
     * 
     * @param businessprocessId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public businessprocessBusinessprocessIdTaskdefinitionsGet(businessprocessId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<BusinessProcessTaskDefinition>>;
    public businessprocessBusinessprocessIdTaskdefinitionsGet(businessprocessId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BusinessProcessTaskDefinition>>>;
    public businessprocessBusinessprocessIdTaskdefinitionsGet(businessprocessId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BusinessProcessTaskDefinition>>>;
    public businessprocessBusinessprocessIdTaskdefinitionsGet(businessprocessId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (businessprocessId === null || businessprocessId === undefined) {
            throw new Error('Required parameter businessprocessId was null or undefined when calling businessprocessBusinessprocessIdTaskdefinitionsGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerToken) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<BusinessProcessTaskDefinition>>('get',`${this.basePath}/businessprocess/${encodeURIComponent(String(businessprocessId))}/taskdefinitions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtiene definiciones de procesos de negocio
     * Obtiene todas las definiciones de procesos de negocio (/applications/3/process-definitionscrmrsurve)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public businessprocessGet(observe?: 'body', reportProgress?: boolean): Observable<Array<BusinessProcessDefinition>>;
    public businessprocessGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BusinessProcessDefinition>>>;
    public businessprocessGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BusinessProcessDefinition>>>;
    public businessprocessGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (BearerToken) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<BusinessProcessDefinition>>('get',`${this.basePath}/businessprocess`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Detalle de una instancia de proceso
     * Detalle de instancia de proceso (/applications/3/process-definitions/{businessprocessId}/process-instances/{businessprocessId})
     * @param instanceId 
     * @param finished si es true, retorna sólo las instancias finalizadas
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public businessprocessInstancesInstanceIdGet(instanceId: string, finished?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<BusinessProcessInstance>>;
    public businessprocessInstancesInstanceIdGet(instanceId: string, finished?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BusinessProcessInstance>>>;
    public businessprocessInstancesInstanceIdGet(instanceId: string, finished?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BusinessProcessInstance>>>;
    public businessprocessInstancesInstanceIdGet(instanceId: string, finished?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (instanceId === null || instanceId === undefined) {
            throw new Error('Required parameter instanceId was null or undefined when calling businessprocessInstancesInstanceIdGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (finished !== undefined && finished !== null) {
            queryParameters = queryParameters.set('finished', <any>finished);
        }

        let headers = this.defaultHeaders;

        // authentication (BearerToken) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<BusinessProcessInstance>>('get',`${this.basePath}/businessprocess/instances/${encodeURIComponent(String(instanceId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtiene la definición de tareas de un proceso de negocio
     * definición de tareas de un proceso de negocio (/applications/3/tasks//task-definitions-extended)
     * @param processInstanceId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public businessprocessInstancesProcessInstanceIdHistoricActivitiesGet(processInstanceId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<BusinessProcessTaskActivity>>;
    public businessprocessInstancesProcessInstanceIdHistoricActivitiesGet(processInstanceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BusinessProcessTaskActivity>>>;
    public businessprocessInstancesProcessInstanceIdHistoricActivitiesGet(processInstanceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BusinessProcessTaskActivity>>>;
    public businessprocessInstancesProcessInstanceIdHistoricActivitiesGet(processInstanceId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (processInstanceId === null || processInstanceId === undefined) {
            throw new Error('Required parameter processInstanceId was null or undefined when calling businessprocessInstancesProcessInstanceIdHistoricActivitiesGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerToken) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<BusinessProcessTaskActivity>>('get',`${this.basePath}/businessprocess/instances/${encodeURIComponent(String(processInstanceId))}/historic-activities`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
