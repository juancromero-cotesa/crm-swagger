/**
 * Api CRM
 * Especificaciónes de la API pública de CRM.  # Versión 2 parte pública.  ***  Los métodos estaran protegidos mediante el paso de un token válido.  Los métodos que puedan ser accedidos por aplicaciones de terceros estarán protegidos por el paso de una api key que tendrá definidos los permisos correspondientes.  Se eliminan las descriciones de cambios de versiones anteriores a la 5, se pueden consultar en las versiones previas    ### 0.5.0 ***  ### Contacto Campaña Se define el esquema CampaignContact Se añaden los métodos para la obtención, creación y borrado masivo de contactos en una campaña Se añaden los métodos para la obtención, edición y borrado de contactos , de manera individual, en una campaña  ### CitizenCard Se añade la propiedad citizenId en tarjeta ciudadana   ### 0.5.1 *** Se declara el esquema Survey que almacenará valoraciones del ciudadano  ### Solicitudes Se depreca   /crmrequests/{crmRequestId}/bpsprocess Añade el método POST   /crmrequests/{crmRequestId}/survey para almacenar la respuesta a la valoración de la solicitud Se añade la propiedad survey a la solicitud para almacenar la valoración del ciudadano a la atención recibida Se modifica el método en el método /crmrequests/{crmRequestId}/situation la clase del objeto a enviar en el post de CrmRequest a Situation  ### Person Se añade la propiedad surveys para almacenar las valoraciones del ciudadano al servicio prestado por el ayuntamiento Añade el método POST   /persons/survey para almacenar una nueva respuesta de encuesta de valoración del servicio  ### 0.5.2 ***  ### Personas   se modifica el método /persons/survey/ a   /persons/survey/{personId} pasando el id de la persona a la que establecer la encuesta    ## 0.5.3 ***  ### Auth Se define el método auth/thirdpartylogin para proporcionar login SSO a terceros (ya implementado)  ### Comment Se agregan los campos tipo, codigo y descripcion de la situacion a los comentarios de una solicitud y una interaccion  ## 0.5.4 ***  ### Tipos de interacciones  Define la propiedad identificator en el esquema de tipo de interacción Define el método  /interactions/types/{identificator} para obtener un tipo de interacción por su identificador  ## 0.5.5 ***  ### Personas Se añade el atributo que contiene la lista negra de tipos de interacciones a no registrar en la persona  ### CensusType Se añade el atributo email que guarda el email del usuario en el censo   ## 0.5.6  Corrige la respuesta de método  /interactions/types/{identificator} no es un array 
 *
 * OpenAPI spec version: 0.5.6-PRIVATE
 * Contact: juancromero@grupotecopy.es
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CrmParam } from '../model/crmParam';
import { CrmParamType } from '../model/crmParamType';
import { ServiceResponseError } from '../model/serviceResponseError';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ParametrizacinService {

    protected basePath = '{servidor}/public/{version}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Tipos de Parámetros
     * Obtiene los distintos tipos de parámetros de la aplicación.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public paramsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<CrmParamType>>;
    public paramsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CrmParamType>>>;
    public paramsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CrmParamType>>>;
    public paramsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (BearerToken) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CrmParamType>>('get',`${this.basePath}/params`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Parámetros de la aplicación
     * Obtiene los distintos valores de parametrización de la aplicación por su tipo. - Tipos de personas - Tipos de documentos
     * @param paramType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public paramsParamTypeGet(paramType: CrmParamType, observe?: 'body', reportProgress?: boolean): Observable<Array<CrmParam>>;
    public paramsParamTypeGet(paramType: CrmParamType, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CrmParam>>>;
    public paramsParamTypeGet(paramType: CrmParamType, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CrmParam>>>;
    public paramsParamTypeGet(paramType: CrmParamType, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (paramType === null || paramType === undefined) {
            throw new Error('Required parameter paramType was null or undefined when calling paramsParamTypeGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerToken) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CrmParam>>('get',`${this.basePath}/params/${encodeURIComponent(String(paramType))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Eliminar parámetro
     * Elimina el parámetro por su nombre para el tipo enviado en el path
     * @param paramType 
     * @param paramName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public paramsParamTypeParamNameDelete(paramType: CrmParamType, paramName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public paramsParamTypeParamNameDelete(paramType: CrmParamType, paramName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public paramsParamTypeParamNameDelete(paramType: CrmParamType, paramName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public paramsParamTypeParamNameDelete(paramType: CrmParamType, paramName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (paramType === null || paramType === undefined) {
            throw new Error('Required parameter paramType was null or undefined when calling paramsParamTypeParamNameDelete.');
        }

        if (paramName === null || paramName === undefined) {
            throw new Error('Required parameter paramName was null or undefined when calling paramsParamTypeParamNameDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerToken) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/params/${encodeURIComponent(String(paramType))}/${encodeURIComponent(String(paramName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Parámetros de la aplicación
     * Crea un nuevo parámerto - Tipos de personas - Tipos de documentos
     * @param body 
     * @param paramType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public paramsParamTypePost(body: CrmParam, paramType: CrmParamType, observe?: 'body', reportProgress?: boolean): Observable<CrmParam>;
    public paramsParamTypePost(body: CrmParam, paramType: CrmParamType, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CrmParam>>;
    public paramsParamTypePost(body: CrmParam, paramType: CrmParamType, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CrmParam>>;
    public paramsParamTypePost(body: CrmParam, paramType: CrmParamType, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling paramsParamTypePost.');
        }

        if (paramType === null || paramType === undefined) {
            throw new Error('Required parameter paramType was null or undefined when calling paramsParamTypePost.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerToken) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CrmParam>('post',`${this.basePath}/params/${encodeURIComponent(String(paramType))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Actualiza un parámetro
     * Actualiza el parámetro recibido
     * @param body 
     * @param paramType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public paramsParamTypePut(body: CrmParam, paramType: CrmParamType, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public paramsParamTypePut(body: CrmParam, paramType: CrmParamType, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public paramsParamTypePut(body: CrmParam, paramType: CrmParamType, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public paramsParamTypePut(body: CrmParam, paramType: CrmParamType, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling paramsParamTypePut.');
        }

        if (paramType === null || paramType === undefined) {
            throw new Error('Required parameter paramType was null or undefined when calling paramsParamTypePut.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerToken) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/params/${encodeURIComponent(String(paramType))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
