/**
 * Api CRM
 * Especificaciónes de la API pública de CRM.  # Versión 2 parte pública.  ***  Los métodos estaran protegidos mediante el paso de un token válido.  Los métodos que puedan ser accedidos por aplicaciones de terceros estarán protegidos por el paso de una api key que tendrá definidos los permisos correspondientes.  Se eliminan las descriciones de cambios de versiones anteriores a la 0.4.5, se pueden consultar en las versiones previas   ### 0.4.5 ***  ### FAQs Se renombran los métodos /faqs/file a /faqs/files para igualarlo con lo implementado en back se añade el método get  /faqs/files/{fileId} para la descarga de ficheros Se define corrctamente el método de subida de archivos post /faqs/files Se modifica FaqFile se añaden las propiedades fileName y fileType  ### 0.4.6 ***  ###Campañas Se definen el esquema Campaign Se definen los mátodos de camapañas   ###Users Se añade la propiedad citizen al esquema UserBasic que indica si es un usuario ciudadano  ### 0.4.7 *** modifica _id y fieldMaps en el esquema Campaign  ### 0.4.8 *** Se añade text en campaign para usar como texto a enviar en campañas que no usan plantillas como las notificaciones push Se añade subject  Se elimina campaignListId y se añade campaignListName Se añade la propiedad status (enumerado)       ### 0.4.9 *** Se añade metodo POST /persons/personContact  ### 0.5.0 ***  ###Contacto Campaña Se define el esquema CampaignContact Se añaden los métodos para la obtención, creación y borrado masivo de contactos en una campaña Se añaden los métodos para la obtención, edición y borrado de contactos , de manera individual, en una campaña  ###CitizenCard Se añade la propiedad citizenId en tarjeta ciudadana   ### 0.5.0 *** Se declara el esquema Survey que almacenará valoraciones del ciudadano  ###Solicitudes Se depreca   /crmrequests/{crmRequestId}/bpsprocess Añade el método POST   /crmrequests/{crmRequestId}/survey para almacenar la respuesta a la valoración de la solicitud Se añade la propiedad survey a la solicitud para almacenar la valoración del ciudadano a la atención recibida Se modifica el método en el método /crmrequests/{crmRequestId}/situation la clase del objeto a enviar en el post de CrmRequest a Situation  ###Person Se añade la propiedad surveys para almacenar las valoraciones del ciudadano al servicio prestado por el ayuntamiento Añade el método POST   /persons/survey para almacenar una nueva respuesta de encuesta de valoración del servicio 
 *
 * OpenAPI spec version: 0.5.1-PRIVATE
 * Contact: juancromero@grupotecopy.es
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Address } from './address';
import { Avatar } from './avatar';
import { CensusData } from './censusData';
import { CitizenCard } from './citizenCard';
import { CrmParam } from './crmParam';
import { ElectronicOffice } from './electronicOffice';
import { IntegrationItem } from './integrationItem';
import { InteractionStatistic } from './interactionStatistic';
import { Segment } from './segment';
import { SegmentItem } from './segmentItem';
import { Survey } from './survey';

/**
 * Objeto persona que almacena la información de cada persona física o jurídica
 */
export interface Person { 
    _id?: string;
    identificationType?: CrmParam;
    /**
     * Documento de identificación
     */
    identificationDoc?: string;
    avatar?: Avatar;
    personType: CrmParam;
    citizenCard?: CitizenCard;
    interactionsStatistic?: Array<InteractionStatistic>;
    name: string;
    surname1?: string;
    surname2?: string;
    /**
     * Fecha completa según RFC 3339, section 5.6
     */
    birthDate?: Date;
    phones?: Array<string>;
    email?: string;
    preferedContactMethod?: CrmParam;
    censusData?: CensusData;
    electronicOffice?: ElectronicOffice;
    addresses?: Array<Address>;
    genre?: CrmParam;
    /**
     * Lista de los segmentos de perfilado a los que pertenece la persona con sus propiedades particulares
     */
    segmentation?: Array<SegmentItem>;
    /**
     * Lista de los segmentos añadidos manualmente que no expiran
     */
    segmentationWhiteList?: Array<Segment>;
    /**
     * Lista de los segmentos que la persona rechaza que se le asignen
     */
    segmentationBlackList?: Array<Segment>;
    deleted?: boolean;
    /**
     * Fecha completa según RFC 3339, section 5.6
     */
    deletedDate?: Date;
    /**
     * Catálogo de integraciones disponibles para la persona
     */
    integrations?: Array<IntegrationItem>;
    /**
     * opiniones sobre el servicio prestado por el ayuntamiento. Un ciudadano podrá valorar el servicio de forma general cuantas veces quiera
     */
    surveys?: Array<Survey>;
}